import numpy as np
from scipy.stats import norm
import matplotlib.pyplot as plt

# Parâmetros do modelo
r = 0.06  # Taxa de juros
sigma = 0.2  # Volatilidade
K = 50  # Preço de exercício
T = 5/12  # Tempo até a expiração (5 meses)
S0 = 50  # Preço atual da ação (usaremos apenas um valor para simplificar)
N = 200  # Número de passos de tempo
M = 10000  # Número de trajetórias

# Função para calcular o preço da opção usando Monte Carlo
def monte_carlo(S0, K, T, r, sigma, N, M):
    dt = T / N
    discount_factor = np.exp(-r * T)
    
    # Inicializar o vetor de preços da opção
    S = np.zeros((M, N+1))
    S[:, 0] = S0
    
    for i in range(M):
        for j in range(1, N+1):
            epsilon = np.random.normal(0, 1)
            S[i, j] = S[i, j-1] * np.exp((r - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * epsilon)
    
    # Calcular o payoff para cada trajetória
    payoffs = np.maximum(S[:, -1] - K, 0)
    
    # Calcular o preço da opção
    option_price = discount_factor * np.mean(payoffs)
    return payoffs, option_price

# Função para calcular o preço da opção usando Monte Carlo com variação antitética
def monte_carlo_antithetic(S0, K, T, r, sigma, N, M):
    dt = T / N
    discount_factor = np.exp(-r * T)
    
    # Inicializar o vetor de preços da opção
    S1 = np.zeros((M, N+1))
    S2 = np.zeros((M, N+1))
    S1[:, 0] = S0
    S2[:, 0] = S0
    
    for i in range(M):
        for j in range(1, N+1):
            epsilon = np.random.normal(0, 1)
            S1[i, j] = S1[i, j-1] * np.exp((r - 0.5 * sigma**2) * dt + sigma * np.sqrt(dt) * epsilon)
            S2[i, j] = S2[i, j-1] * np.exp((r - 0.5 * sigma**2) * dt - sigma * np.sqrt(dt) * epsilon)
    
    # Calcular o payoff para cada trajetória
    payoffs1 = np.maximum(S1[:, -1] - K, 0)
    payoffs2 = np.maximum(S2[:, -1] - K, 0)
    payoffs = 0.5 * (payoffs1 + payoffs2)
    
    # Calcular o preço da opção
    option_price = discount_factor * np.mean(payoffs)
    return payoffs, option_price

# Calcular os payoffs e preços das opções usando Monte Carlo
mc_payoffs, mc_price = monte_carlo(S0, K, T, r, sigma, N, M)

# Calcular os payoffs e preços das opções usando Monte Carlo com variação antitética
mc_antithetic_payoffs, mc_antithetic_price = monte_carlo_antithetic(S0, K, T, r, sigma, N, M)

# Plotar os histogramas
plt.figure(figsize=(12, 6))

plt.hist(mc_payoffs, bins=50, alpha=0.5, label='Monte Carlo')
plt.axvline(np.mean(mc_payoffs), color='blue', linestyle='dashed', linewidth=2, label=f'Média MC: {np.mean(mc_payoffs):.2f}')

plt.hist(mc_antithetic_payoffs, bins=50, alpha=0.5, label='Monte Carlo Antitético')
plt.axvline(np.mean(mc_antithetic_payoffs), color='orange', linestyle='dashed', linewidth=2, label=f'Média MC Antitético: {np.mean(mc_antithetic_payoffs):.2f}')

plt.title('Histograma dos Payoffs - Monte Carlo vs Monte Carlo Antitético')
plt.xlabel('Payoff')
plt.ylabel('Frequência')
plt.legend()
plt.show()

# Calcular e exibir os desvios padrão
std_mc = np.std(mc_payoffs)
std_mc_antithetic = np.std(mc_antithetic_payoffs)

print(f"Desvio padrão (Monte Carlo): {std_mc:.4f}")
print(f"Desvio padrão (Monte Carlo Antitético): {std_mc_antithetic:.4f}")